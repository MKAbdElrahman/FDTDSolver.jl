var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FDTDSolver","category":"page"},{"location":"#FDTDSolver","page":"Home","title":"FDTDSolver","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FDTDSolver.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FDTDSolver]","category":"page"},{"location":"#FDTDSolver.optimal_cell_size-Tuple{Any, Any, Any}","page":"Home","title":"FDTDSolver.optimal_cell_size","text":"function optimal_cell_size(Δ_min::Real, Δ_max::Real, x_c::Vector; n_particles::Int = 100, p_norm::Int = Inf)\n\nUses particle swarm optimization to return a cell size in the range [Δmin,Δmax] such that the nodes x_c are integer multiples of the found cell size.\n\n...\n\nArguments\n\nΔ_min: minimum cell size\nΔ_max: maximum cell size\nx_c: constraint node coordinates\nn_particles: number of particles in the swarm (default: 100)\np_norm: norm used to calculate the misfit objective function (default: Inf)\nrange: set true to return a LinRange instead  of cell spacing.\n\n...\n\nExamples\n\njulia> optimal_cell_size(0.1,.3,[-1,-.5,1,1.25,2])\n[ Info: finding optimal cell size...\n[ Info: optimal cell size found is 0.125 with loss = 0.0\n0.125\n\n...\n\nDetails\n\nThe details of the algorithm are described in: \"Structured Mesh Generation: Open-source automatic nonuniform mesh generation for FDTD simulation.\" link to the paper: https://ieeexplore.ieee.org/document/7458133\n\n\n\n\n\n","category":"method"}]
}
